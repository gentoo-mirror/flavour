#!/bin/bash
# This script wraps the ktclient command in order to make it actually work.
# Based on scripting made by Robert Klein <r.klein@kennisnet.nl>
# (keytalk-1.0 [20171107] Packaged in Kennisnet Debian package for the keytalk client.)
# Shared with permission.
#
# This script is part of the keytalk-client-bin package for Gentoo (flavour-overlay).

HOMEDIR=$(echo ~)
KEYTALK_DIR="${HOMEDIR}/.keytalk"
KEYSTORE_DIR="${KEYTALK_DIR}/keystore"
TMP_DIR="${HOMEDIR}/tmp"
TMP_PFX="${TMP_DIR}/keytalk.pfx"
TMP_PFXPWD="${TMP_DIR}/keytalk.pfx.pass"
ISSUE="FALSE"

# check if first run
if [ ! -d ${KEYTALK_DIR} ]; then
    echo "Running for the first time, setting up the configuration ..."
    mkdir -p ${KEYSTORE_DIR}
    mkdir -p ${TMP_DIR}

    echo "Setting up config in ${KEYTALK_DIR}/"
    cp /usr/share/keytalk/empty-user.ini ${KEYTALK_DIR}/user.ini
    read -p "rccd url: " RCCD
    echo "RCCD=\"${RCCD}\"" > ${KEYTALK_DIR}/config
    echo "EXPIRY=1800" >> ${KEYTALK_DIR}/config

    echo "Setting up ${KEYTALK_DIR}/credentials"
    touch ${KEYTALK_DIR}/credentials
    chmod 600 ${KEYTALK_DIR}/credentials
    read -p "username: " USERNAME
    echo "USERNAME=\"${USERNAME}\"" >> ${KEYTALK_DIR}/credentials
    read -s -p "password: " PASSWORD
    echo "PASSWORD=\"${PASSWORD}\"" >> ${KEYTALK_DIR}/credentials

    echo "First time run, execute ktconfig as root"
    echo "ktconfig --rccd-path \"${RCCD}\" &> /dev/null || true"
fi

source ${KEYTALK_DIR}/config
source ${KEYTALK_DIR}/credentials


# find out if cert needs to be issued
PFX_FILE=$(find ${KEYSTORE_DIR} -type f -name "*.pfx")
if [[ "${PFX_FILE}" != "" ]]; then
    if ! openssl pkcs12 -in "$PFX_FILE" -clcerts -nokeys -passin pass: | openssl x509 -noout -checkend $EXPIRY; then
        ISSUE="TRUE"
    else
        SUBJECT=$(openssl pkcs12 -in "$PFX_FILE" -clcerts -nokeys -passin pass: | openssl x509 -noout -subject)
        echo "The certificate with subject ${SUBJECT} does not need reissuing"
    fi
else
    ISSUE="TRUE"
fi

if [[ ${ISSUE} == "TRUE" ]]; then
    echo "Running ktclient ... "
    echo "${PASSWORD}" | ktclient --user "${USERNAME}" --interactive --save-pfx

    SUBJECT=$(openssl pkcs12 -in "${TMP_PFX}" -clcerts -nokeys -passin file:"${TMP_PFXPWD}" | openssl x509 -noout -subject)
    SUBJECT_HASH=$(openssl pkcs12 -in "${TMP_PFX}" -clcerts -nokeys -passin file:"${TMP_PFXPWD}" | openssl x509 -noout -hash)

    echo "Generating PFX file ..."
    openssl pkcs12 -in "${TMP_PFX}" -passin file:"${TMP_PFXPWD}" -nodes -out "${TMP_DIR}/keytalk.pem"
    openssl pkcs12 -export -name keytalk -nodes -in "${TMP_DIR}/keytalk.pem" -out "${KEYSTORE_DIR}/${SUBJECT_HASH}.pfx" -passout pass:

    # splitting for use openfortivpn (user-cert and user-key args)
    echo "Splitting PEM file ..."
    PEM_FILE=$(find ${KEYSTORE_DIR} -type f -name "*.pem")
    openssl x509 -in "${PEM_FILE}" -out "${KEYSTORE_DIR}/${SUBJECT_HASH}.pem.cert"
    openssl pkey -in "${PEM_FILE}" -out "${KEYSTORE_DIR}/${SUBJECT_HASH}.pem.key"
    chmod 600 "${KEYSTORE_DIR}/${SUBJECT_HASH}.pem.key"

    echo "Cleaning up temp files"
    rm "${TMP_DIR}"/keytalk.*

    echo "A certificate with subject ${SUBJECT} is issued"
fi
